name: PR Quality and Security Check

on:
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write

jobs:
  code-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Required to compare HEAD with main for a proper diff

      - name: Get Diff
        run: |
          # Extract the diff from origin/main to HEAD
          # Filter lines starting with '+' or '-' to focus on actual code changes.
          # Exclude lines that are diff metadata like +++, ---.
          git diff origin/main...HEAD \
            | grep '^[+-]' \
            | grep -Ev '^(---|\+\+\+)' > code_changes_only.txt

          # Convert these changes into a JSON object
          jq -Rs '{diff: .}' code_changes_only.txt > diff.json

      - name: Display Processed Diff (Debug)
        run: cat diff.json

      - name: Analyze with OpenAI
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Extract the diff from diff.json
          DIFF_CONTENT=$(jq -r '.diff' diff.json)

          # Build the prompt
          # The prompt instructs the model to review the code changes for obvious quality or security issues.
          PROMPT="Please review the following code changes for any obvious quality or security issues. Provide a brief report:\n\n${DIFF_CONTENT}"

          # Construct the request body with jq to ensure valid JSON
          jq -n --arg prompt "$PROMPT" '{
            "model": "gpt-3.5-turbo",
            "messages": [
              {
                "role": "system",
                "content": "You are a code reviewer focusing on security and quality."
              },
              {
                "role": "user",
                "content": $prompt
              }
            ],
            "max_tokens": 500,
            "temperature": 0.2
          }' > request.json

          # Show request body (for debugging)
          cat request.json

          # Send request to OpenAI
          curl https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${OPENAI_API_KEY}" \
            -d @request.json > response.json

      - name: Debug OpenAI Response
        run: cat response.json

      - name: Extract Review Message
        id: extract_message
        run: |
          # Extract the assistant's response content from the JSON
          ASSISTANT_MSG=$(jq -r '.choices[0].message.content' response.json)
          if [ -z "$ASSISTANT_MSG" ] || [ "$ASSISTANT_MSG" = "null" ]; then
            echo "No valid assistant message found."
            exit 1
          fi
          echo "message=$ASSISTANT_MSG" >> $GITHUB_OUTPUT

      - name: Post comment to PR
        env:
          COMMENT: ${{ steps.extract_message.outputs.message }}
          GH_TOKEN: ${{ github.token }}
        run: |
          gh api \
            repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
            -f body="$COMMENT"