name: PR Quality and Security Check

on:
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write

jobs:
  code-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          # Ensures we have both PR base and head for the diff
          fetch-depth: 0

      - name: Get Diff
        # Capture the diff of changed files in the PR
        run: git diff origin/main...HEAD > diff.txt

      - name: Display Diff (Debug)
        run: cat diff.txt

      - name: Analyze with OpenAI
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          PROMPT=$(echo "Please review the following code changes for any obvious quality or security issues. Provide a brief report:\n\n$(cat diff.txt)" | sed 's/"/\\"/g')
          curl https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${OPENAI_API_KEY}" \
            -d '{
              "model": "o1",
              "messages": [
                {"role": "system", "content": "You are a code reviewer focusing on security and quality. Provide a review of the attached code diff and highlight key areas of improvement."},
                {"role": "user", "content": "'"$PROMPT"'"}
              ],
              "max_tokens": 500,
              "temperature": 0.2
            }' > response.json

      - name: Debug OpenAI Response
        run: cat response.json

      - name: Extract Review Message
        id: extract_message
        run: |
          # Extract the assistant's response content from the JSON
          ASSISTANT_MSG=$(jq -r '.choices[0].message.content' response.json)
          echo "Extracted message: $ASSISTANT_MSG"
          echo "message=$ASSISTANT_MSG" >> $GITHUB_OUTPUT

      - name: Post comment to PR
        if: always()
        env:
          COMMENT: ${{ steps.extract_message.outputs.message }}
          GH_TOKEN: ${{ github.token }}
        run: |
          # Ensure COMMENT is not empty before posting
          if [ -z "$COMMENT" ] || [ "$COMMENT" = "null" ]; then
            echo "No valid comment extracted. Skipping comment post."
            exit 0
          fi
          gh api \
            repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
            -f body="$COMMENT"